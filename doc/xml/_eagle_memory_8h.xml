<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_eagle_memory_8h" kind="file">
    <compoundname>EagleMemory.h</compoundname>
    <includedby refid="_eagle_instance_8c" local="yes">eagle/eagle/EagleInstance.c</includedby>
    <includedby refid="_eagle_linked_list_8c" local="yes">eagle/eagle/EagleLinkedList.c</includedby>
    <includedby refid="_eagle_linked_list_item_8c" local="yes">eagle/eagle/EagleLinkedListItem.c</includedby>
    <includedby refid="_eagle_lock_8c" local="yes">eagle/eagle/EagleLock.c</includedby>
    <includedby refid="_eagle_logger_8c" local="yes">eagle/eagle/EagleLogger.c</includedby>
    <includedby refid="_eagle_logger_event_8c" local="yes">eagle/eagle/EagleLoggerEvent.c</includedby>
    <includedby refid="_eagle_memory_8c" local="yes">eagle/eagle/EagleMemory.c</includedby>
    <includedby refid="_eagle_page_8c" local="yes">eagle/eagle/EaglePage.c</includedby>
    <includedby refid="_eagle_page_provider_array_8c" local="yes">eagle/eagle/EaglePageProviderArray.c</includedby>
    <includedby refid="_eagle_page_provider_single_8c" local="yes">eagle/eagle/EaglePageProviderSingle.c</includedby>
    <includedby refid="_eagle_page_provider_stream_8c" local="yes">eagle/eagle/EaglePageProviderStream.c</includedby>
    <includedby refid="_eagle_page_provider_virtual_8c" local="yes">eagle/eagle/EaglePageProviderVirtual.c</includedby>
    <includedby refid="_eagle_plan_8c" local="yes">eagle/eagle/EaglePlan.c</includedby>
    <includedby refid="_eagle_plan_buffer_provider_8c" local="yes">eagle/eagle/EaglePlanBufferProvider.c</includedby>
    <includedby refid="_eagle_plan_job_8c" local="yes">eagle/eagle/EaglePlanJob.c</includedby>
    <includedby refid="_eagle_plan_operation_8c" local="yes">eagle/eagle/EaglePlanOperation.c</includedby>
    <includedby refid="_eagle_synchronizer_8c" local="yes">eagle/eagle/EagleSynchronizer.c</includedby>
    <includedby refid="_eagle_utils_8c" local="yes">eagle/eagle/EagleUtils.c</includedby>
    <includedby refid="_eagle_worker_8c" local="yes">eagle/eagle/EagleWorker.c</includedby>
    <includedby refid="_eagle_workers_8c" local="yes">eagle/eagle/EagleWorkers.c</includedby>
    <includedby refid="_eagle_db_column_8c" local="yes">eagle/eagledb/EagleDbColumn.c</includedby>
    <includedby refid="_eagle_db_console_8c" local="yes">eagle/eagledb/EagleDbConsole.c</includedby>
    <includedby refid="_eagle_db_information_schema_8c" local="yes">eagle/eagledb/EagleDbInformationSchema.c</includedby>
    <includedby refid="_eagle_db_instance_8c" local="yes">eagle/eagledb/EagleDbInstance.c</includedby>
    <includedby refid="_eagle_db_parser_8c" local="yes">eagle/eagledb/EagleDbParser.c</includedby>
    <includedby refid="_eagle_db_schema_8c" local="yes">eagle/eagledb/EagleDbSchema.c</includedby>
    <includedby refid="_eagle_db_sql_binary_expression_8c" local="yes">eagle/eagledb/EagleDbSqlBinaryExpression.c</includedby>
    <includedby refid="_eagle_db_sql_cast_expression_8c" local="yes">eagle/eagledb/EagleDbSqlCastExpression.c</includedby>
    <includedby refid="_eagle_db_sql_expression_8c" local="yes">eagle/eagledb/EagleDbSqlExpression.c</includedby>
    <includedby refid="_eagle_db_sql_function_expression_8c" local="yes">eagle/eagledb/EagleDbSqlFunctionExpression.c</includedby>
    <includedby refid="_eagle_db_sql_insert_8c" local="yes">eagle/eagledb/EagleDbSqlInsert.c</includedby>
    <includedby refid="_eagle_db_sql_select_8c" local="yes">eagle/eagledb/EagleDbSqlSelect.c</includedby>
    <includedby refid="_eagle_db_sql_unary_expression_8c" local="yes">eagle/eagledb/EagleDbSqlUnaryExpression.c</includedby>
    <includedby refid="_eagle_db_sql_value_8c" local="yes">eagle/eagledb/EagleDbSqlValue.c</includedby>
    <includedby refid="_eagle_db_table_8c" local="yes">eagle/eagledb/EagleDbTable.c</includedby>
    <includedby refid="_eagle_db_table_data_8c" local="yes">eagle/eagledb/EagleDbTableData.c</includedby>
    <includedby refid="_eagle_db_tuple_8c" local="yes">eagle/eagledb/EagleDbTuple.c</includedby>
    <invincdepgraph>
      <node id="752">
        <label>eagle/eagledb/EagleDbTuple.c</label>
        <link refid="_eagle_db_tuple_8c"/>
      </node>
      <node id="744">
        <label>eagle/eagledb/EagleDbSqlExpression.c</label>
        <link refid="_eagle_db_sql_expression_8c"/>
        <childnode refid="744" relation="include">
        </childnode>
      </node>
      <node id="734">
        <label>eagle/eagle/EagleWorker.c</label>
        <link refid="_eagle_worker_8c"/>
      </node>
      <node id="748">
        <label>eagle/eagledb/EagleDbSqlUnaryExpression.c</label>
        <link refid="_eagle_db_sql_unary_expression_8c"/>
      </node>
      <node id="746">
        <label>eagle/eagledb/EagleDbSqlInsert.c</label>
        <link refid="_eagle_db_sql_insert_8c"/>
      </node>
      <node id="751">
        <label>eagle/eagledb/EagleDbTableData.c</label>
        <link refid="_eagle_db_table_data_8c"/>
      </node>
      <node id="747">
        <label>eagle/eagledb/EagleDbSqlSelect.c</label>
        <link refid="_eagle_db_sql_select_8c"/>
      </node>
      <node id="742">
        <label>eagle/eagledb/EagleDbSqlBinaryExpression.c</label>
        <link refid="_eagle_db_sql_binary_expression_8c"/>
        <childnode refid="742" relation="include">
        </childnode>
      </node>
      <node id="720">
        <label>eagle/eagle/EagleLogger.c</label>
        <link refid="_eagle_logger_8c"/>
      </node>
      <node id="716">
        <label>eagle/eagle/EagleInstance.c</label>
        <link refid="_eagle_instance_8c"/>
        <childnode refid="716" relation="include">
        </childnode>
      </node>
      <node id="743">
        <label>eagle/eagledb/EagleDbSqlCastExpression.c</label>
        <link refid="_eagle_db_sql_cast_expression_8c"/>
        <childnode refid="743" relation="include">
        </childnode>
      </node>
      <node id="740">
        <label>eagle/eagledb/EagleDbParser.c</label>
        <link refid="_eagle_db_parser_8c"/>
      </node>
      <node id="741">
        <label>eagle/eagledb/EagleDbSchema.c</label>
        <link refid="_eagle_db_schema_8c"/>
      </node>
      <node id="733">
        <label>eagle/eagle/EagleUtils.c</label>
        <link refid="_eagle_utils_8c"/>
      </node>
      <node id="739">
        <label>eagle/eagledb/EagleDbInstance.c</label>
        <link refid="_eagle_db_instance_8c"/>
        <childnode refid="739" relation="include">
        </childnode>
      </node>
      <node id="738">
        <label>eagle/eagledb/EagleDbInformationSchema.c</label>
        <link refid="_eagle_db_information_schema_8c"/>
        <childnode refid="738" relation="include">
        </childnode>
      </node>
      <node id="717">
        <label>eagle/eagle/EagleLinkedList.c</label>
        <link refid="_eagle_linked_list_8c"/>
      </node>
      <node id="731">
        <label>eagle/eagle/EaglePlanOperation.c</label>
        <link refid="_eagle_plan_operation_8c"/>
      </node>
      <node id="732">
        <label>eagle/eagle/EagleSynchronizer.c</label>
        <link refid="_eagle_synchronizer_8c"/>
      </node>
      <node id="737">
        <label>eagle/eagledb/EagleDbConsole.c</label>
        <link refid="_eagle_db_console_8c"/>
        <childnode refid="737" relation="include">
        </childnode>
      </node>
      <node id="745">
        <label>eagle/eagledb/EagleDbSqlFunctionExpression.c</label>
        <link refid="_eagle_db_sql_function_expression_8c"/>
      </node>
      <node id="726">
        <label>eagle/eagle/EaglePageProviderStream.c</label>
        <link refid="_eagle_page_provider_stream_8c"/>
      </node>
      <node id="729">
        <label>eagle/eagle/EaglePlanBufferProvider.c</label>
        <link refid="_eagle_plan_buffer_provider_8c"/>
      </node>
      <node id="725">
        <label>eagle/eagle/EaglePageProviderSingle.c</label>
        <link refid="_eagle_page_provider_single_8c"/>
      </node>
      <node id="721">
        <label>eagle/eagle/EagleLoggerEvent.c</label>
        <link refid="_eagle_logger_event_8c"/>
      </node>
      <node id="736">
        <label>eagle/eagledb/EagleDbColumn.c</label>
        <link refid="_eagle_db_column_8c"/>
        <childnode refid="736" relation="include">
        </childnode>
      </node>
      <node id="722">
        <label>eagle/eagle/EagleMemory.c</label>
        <link refid="_eagle_memory_8c"/>
      </node>
      <node id="715">
        <label>eagle/eagle/EagleMemory.h</label>
        <link refid="EagleMemory.h"/>
        <childnode refid="716" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
        <childnode refid="718" relation="include">
        </childnode>
        <childnode refid="719" relation="include">
        </childnode>
        <childnode refid="720" relation="include">
        </childnode>
        <childnode refid="721" relation="include">
        </childnode>
        <childnode refid="722" relation="include">
        </childnode>
        <childnode refid="723" relation="include">
        </childnode>
        <childnode refid="724" relation="include">
        </childnode>
        <childnode refid="725" relation="include">
        </childnode>
        <childnode refid="726" relation="include">
        </childnode>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
        <childnode refid="730" relation="include">
        </childnode>
        <childnode refid="731" relation="include">
        </childnode>
        <childnode refid="732" relation="include">
        </childnode>
        <childnode refid="733" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="736" relation="include">
        </childnode>
        <childnode refid="737" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
        <childnode refid="743" relation="include">
        </childnode>
        <childnode refid="744" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="746" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
        <childnode refid="748" relation="include">
        </childnode>
        <childnode refid="749" relation="include">
        </childnode>
        <childnode refid="750" relation="include">
        </childnode>
        <childnode refid="751" relation="include">
        </childnode>
        <childnode refid="752" relation="include">
        </childnode>
      </node>
      <node id="735">
        <label>eagle/eagle/EagleWorkers.c</label>
        <link refid="_eagle_workers_8c"/>
      </node>
      <node id="723">
        <label>eagle/eagle/EaglePage.c</label>
        <link refid="_eagle_page_8c"/>
      </node>
      <node id="727">
        <label>eagle/eagle/EaglePageProviderVirtual.c</label>
        <link refid="_eagle_page_provider_virtual_8c"/>
      </node>
      <node id="749">
        <label>eagle/eagledb/EagleDbSqlValue.c</label>
        <link refid="_eagle_db_sql_value_8c"/>
      </node>
      <node id="728">
        <label>eagle/eagle/EaglePlan.c</label>
        <link refid="_eagle_plan_8c"/>
      </node>
      <node id="750">
        <label>eagle/eagledb/EagleDbTable.c</label>
        <link refid="_eagle_db_table_8c"/>
      </node>
      <node id="719">
        <label>eagle/eagle/EagleLock.c</label>
        <link refid="_eagle_lock_8c"/>
      </node>
      <node id="730">
        <label>eagle/eagle/EaglePlanJob.c</label>
        <link refid="_eagle_plan_job_8c"/>
      </node>
      <node id="718">
        <label>eagle/eagle/EagleLinkedListItem.c</label>
        <link refid="_eagle_linked_list_item_8c"/>
      </node>
      <node id="724">
        <label>eagle/eagle/EaglePageProviderArray.c</label>
        <link refid="_eagle_page_provider_array_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_eagle_memory_8h_1a21ad14d6772cd800661d5f2a29d18d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* EagleMemory_Allocate</definition>
        <argsstring>(char *id, size_t size)</argsstring>
        <name>EagleMemory_Allocate</name>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a single block of memory. </para>        </briefdescription>
        <detaileddescription>
<para>Memory that is allocated will be zeroed out.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>This is a unique string used for mocking memory allocations. See <ref refid="_eagle_memory_8c_1a3025570485681866405dbfdc3a3b6106" kindref="member">EagleMemory_Mock()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of memory to allocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the new memory or NULL upon failure. Failures must be handled in your code and may need to cascade up to recover from the failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="14" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="21" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_memory_8h_1aaa3b2daf6c57f2aa57de0ade732caeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EagleMemory_Free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>EagleMemory_Free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free a pointer. </para>        </briefdescription>
        <detaileddescription>
<para>The pointer will be set to NULL. It is safe to call this function with NULL and hence to call it multiple times on the same pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="23" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_memory_8h_1aeb088ccc405464f0208300483da4b5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EagleMemory_GetMockInvocations</definition>
        <argsstring>(void)</argsstring>
        <name>EagleMemory_GetMockInvocations</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of times a mocked malloc has returned NULL since <ref refid="_eagle_memory_8c_1a1e005f64d6b7e04a366013d1451f71db" kindref="member">EagleMemory_MockInit()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of mock invocations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="79" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_memory_8h_1a3025570485681866405dbfdc3a3b6106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EagleMemory_Mock</definition>
        <argsstring>(char *id)</argsstring>
        <name>EagleMemory_Mock</name>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Mocking memory allocations. </para>        </briefdescription>
        <detaileddescription>
<para>This is used by the MemorySuite to mock malloc() returning NULL. Every <ref refid="_eagle_memory_8c_1a21ad14d6772cd800661d5f2a29d18d2b" kindref="member">EagleMemory_Allocate()</ref> and <ref refid="_eagle_memory_8c_1ae5491d67ddaa1386224a414a5e944a6a" kindref="member">EagleMemory_MultiAllocate()</ref> requires a unique ID. This ID can be sent to <ref refid="_eagle_memory_8c_1a3025570485681866405dbfdc3a3b6106" kindref="member">EagleMemory_Mock()</ref> to make sure that allocation returns NULL and the program handles the failure correctly.</para><para>You may have upto 32 mocks for a single test case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the allocation handle to mock. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="66" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="80" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_memory_8h_1a7792dd6a6606c2cdcdc55f0e95a6d298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EagleMemory_MockFinish</definition>
        <argsstring>(void)</argsstring>
        <name>EagleMemory_MockFinish</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Finish the mocking session. </para>        </briefdescription>
        <detaileddescription>
<para>Run this method at the end of each test case, after invoking <ref refid="_eagle_memory_8c_1a3025570485681866405dbfdc3a3b6106" kindref="member">EagleMemory_Mock()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="73" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_memory_8h_1a1e005f64d6b7e04a366013d1451f71db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EagleMemory_MockInit</definition>
        <argsstring>(void)</argsstring>
        <name>EagleMemory_MockInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Start the mocking session. </para>        </briefdescription>
        <detaileddescription>
<para>Run this method at the top of each test case, before invoking <ref refid="_eagle_memory_8c_1a3025570485681866405dbfdc3a3b6106" kindref="member">EagleMemory_Mock()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="53" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_memory_8h_1ae5491d67ddaa1386224a414a5e944a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** EagleMemory_MultiAllocate</definition>
        <argsstring>(char *id, size_t size, int quantity)</argsstring>
        <name>EagleMemory_MultiAllocate</name>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
<para>Allocate a single block to support an array. </para>        </briefdescription>
        <detaileddescription>
<para>There is still only a single allocation, this is eqivilent to calloc().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>This is a unique string used for mocking memory allocations. See <ref refid="_eagle_memory_8c_1a3025570485681866405dbfdc3a3b6106" kindref="member">EagleMemory_Mock()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of a single array element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">quantity</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of array items. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new single malloc block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="35" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_memory_8h_1a55fcbc7c086980e66727c063b345e717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EagleMemory_MultiFree</definition>
        <argsstring>(void **ptr, int quantity)</argsstring>
        <name>EagleMemory_MultiFree</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
<para>Free an array of elements. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not the eqivilent opposite of <ref refid="_eagle_memory_8c_1ae5491d67ddaa1386224a414a5e944a6a" kindref="member">EagleMemory_MultiAllocate()</ref>. This function will free each array element, then the whole array itself.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">quantity</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of items in the array. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h" line="46" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.c" bodystart="58" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>eagle_EagleMemory_h</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>eagle_EagleMemory_h</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="_eagle_memory_8c_1a21ad14d6772cd800661d5f2a29d18d2b" kindref="member" tooltip="Allocate a single block of memory.">EagleMemory_Allocate</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_memory_8c_1aaa3b2daf6c57f2aa57de0ade732caeb5" kindref="member" tooltip="Free a pointer.">EagleMemory_Free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="_eagle_memory_8c_1ae5491d67ddaa1386224a414a5e944a6a" kindref="member" tooltip="Allocate a single block to support an array.">EagleMemory_MultiAllocate</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quantity);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_memory_8c_1a55fcbc7c086980e66727c063b345e717" kindref="member" tooltip="Free an array of elements.">EagleMemory_MultiFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quantity);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_memory_8c_1a1e005f64d6b7e04a366013d1451f71db" kindref="member" tooltip="Start the mocking session.">EagleMemory_MockInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_memory_8c_1a3025570485681866405dbfdc3a3b6106" kindref="member" tooltip="Mocking memory allocations.">EagleMemory_Mock</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_memory_8c_1a7792dd6a6606c2cdcdc55f0e95a6d298" kindref="member" tooltip="Finish the mocking session.">EagleMemory_MockFinish</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_eagle_memory_8c_1aeb088ccc405464f0208300483da4b5da" kindref="member" tooltip="Get the number of times a mocked malloc has returned NULL since EagleMemory_MockInit()...">EagleMemory_GetMockInvocations</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleMemory.h"/>
  </compounddef>
</doxygen>
