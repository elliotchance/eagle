<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="struct_eagle_db_sql_expression" kind="struct" prot="public">
    <compoundname>EagleDbSqlExpression</compoundname>
    <includes refid="_eagle_db_sql_expression_8h" local="no">EagleDbSqlExpression.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_eagle_db_sql_expression_1a3faf42a90228121a56f69674cdfd1b23" prot="public" static="no" mutable="no">
        <type></type>
        <definition>EagleDbSqlExpressionHeader</definition>
        <argsstring></argsstring>
        <name>EagleDbSqlExpressionHeader</name>
        <briefdescription>
<para>Header. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="struct_eagle_db_sql_expression_1a3faf42a90228121a56f69674cdfd1b23" kindref="member">EagleDbSqlExpressionHeader</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagledb/EagleDbSqlExpression.h" line="39" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagledb/EagleDbSqlExpression.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Dummy type for other expression structures. </para>    </briefdescription>
    <detaileddescription>
<para>This structure allows the passing of other expression structures without needing to know the real type until runtime.</para><para>Each subexpression type MUST include EagleDbSqlExpressionHeader as the first entry so that structure can be identified. For example:</para><para><programlisting><codeline><highlight class="normal"><sp/><ref refid="struct_eagle_db_sql_expression" kindref="compound" tooltip="Dummy type for other expression structures.">EagleDbSqlExpression</ref><sp/>*expr<sp/>=<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expr-&gt;type<sp/>==<sp/><ref refid="_eagle_db_sql_expression_type_8h_1a9f9ea3b12922dfc8fc26e2463ce34f7da50223901e3ba6904cab8def43831c737" kindref="member" tooltip="Real type is EagleDbSqlValue.">EagleDbSqlExpressionTypeValue</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="struct_eagle_db_sql_value" kindref="compound" tooltip="Encapsulates a Value of any type.">EagleDbSqlValue</ref><sp/>*value<sp/>=<sp/>(<ref refid="struct_eagle_db_sql_value" kindref="compound" tooltip="Encapsulates a Value of any type.">EagleDbSqlValue</ref>*)<sp/>expr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value-&gt;<ref refid="struct_eagle_db_sql_value_1ad77ce651fe9b80a9eaae740340be2082" kindref="member" tooltip="Value type.">type</ref><sp/>==<sp/><ref refid="_eagle_db_sql_value_type_8h_1a8f57a8843866a9491eebb90fdd9c4d25a45a5b1dc7f1b44c879e18afe76d70c47" kindref="member" tooltip="Use intValue.">EagleDbSqlValueTypeInteger</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Integer<sp/>value<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>value-&gt;<ref refid="struct_eagle_db_sql_value_1ae0fcdfcb154f1db2626e6df241ccb6ea" kindref="member" tooltip="Contains the actual value, depending on the type.">value</ref>.<ref refid="struct_eagle_db_sql_value_1a34aa1b9d94871f740efabef1b6d52b2f" kindref="member" tooltip="Integer.">intValue</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>expected<sp/>EagleDbSqlValue<sp/>to<sp/>be<sp/>an<sp/>integer.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>expected<sp/>expr<sp/>to<sp/>be<sp/>a<sp/>Value.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="/Users/elliot/Xcode/eagle/eagle/eagledb/EagleDbSqlExpression.h" line="33" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagledb/EagleDbSqlExpression.h" bodystart="33" bodyend="41"/>
    <listofallmembers>
      <member refid="struct_eagle_db_sql_expression_1a3faf42a90228121a56f69674cdfd1b23" prot="public" virt="non-virtual"><scope>EagleDbSqlExpression</scope><name>EagleDbSqlExpressionHeader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
