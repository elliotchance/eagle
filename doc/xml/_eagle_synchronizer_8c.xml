<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_eagle_synchronizer_8c" kind="file">
    <compoundname>EagleSynchronizer.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="_eagle_synchronizer_8h" local="yes">EagleSynchronizer.h</includes>
    <includes refid="_eagle_memory_8h" local="yes">EagleMemory.h</includes>
    <incdepgraph>
      <node id="1566">
        <label>stdlib.h</label>
      </node>
      <node id="1568">
        <label>mach/mach_time.h</label>
      </node>
      <node id="1565">
        <label>eagle/eagle/EagleSynchronizer.c</label>
        <link refid="EagleSynchronizer.c"/>
        <childnode refid="1566" relation="include">
        </childnode>
        <childnode refid="1567" relation="include">
        </childnode>
        <childnode refid="1573" relation="include">
        </childnode>
      </node>
      <node id="1567">
        <label>EagleSynchronizer.h</label>
        <link refid="_eagle_synchronizer_8h"/>
        <childnode refid="1568" relation="include">
        </childnode>
        <childnode refid="1569" relation="include">
        </childnode>
        <childnode refid="1572" relation="include">
        </childnode>
      </node>
      <node id="1570">
        <label>pthread.h</label>
      </node>
      <node id="1572">
        <label>EagleBoolean.h</label>
        <link refid="_eagle_boolean_8h"/>
      </node>
      <node id="1571">
        <label>Eagle.h</label>
        <link refid="_eagle_8h"/>
      </node>
      <node id="1573">
        <label>EagleMemory.h</label>
        <link refid="_eagle_memory_8h"/>
      </node>
      <node id="1569">
        <label>EagleLock.h</label>
        <link refid="_eagle_lock_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
        <childnode refid="1571" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_eagle_synchronizer_8c_1a98913d5b1b10058b0e839dabdbcaed12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_eagle_lock" kindref="compound">EagleLock</ref> *</type>
        <definition>EagleLock* EagleSynchronizer_CreateLock</definition>
        <argsstring>(void)</argsstring>
        <name>EagleSynchronizer_CreateLock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new <ref refid="struct_eagle_lock" kindref="compound">EagleLock</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Locks can be used to synchronize block of code over multiple threads.</para><para><simplesect kind="return"><para>A new lock instance. </para></simplesect>
<simplesect kind="see"><para><ref refid="_eagle_synchronizer_8h_1a0f54c3edc40e4477acd9f503e51bf299" kindref="member">EagleSynchronizer_Lock()</ref> </para><simplesectsep/><para><ref refid="_eagle_synchronizer_8c_1a6a41ea4ba599f003f8671993660464d6" kindref="member">EagleSynchronizer_Unlock()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleSynchronizer.c" line="6" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleSynchronizer.c" bodystart="5" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_synchronizer_8c_1a6a41ea4ba599f003f8671993660464d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EagleSynchronizer_Unlock</definition>
        <argsstring>(EagleLock *lock)</argsstring>
        <name>EagleSynchronizer_Unlock</name>
        <param>
          <type><ref refid="struct_eagle_lock" kindref="compound">EagleLock</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Unlock an <ref refid="struct_eagle_lock" kindref="compound">EagleLock</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Only one thread may hold a lock at any given time so the next thread waiting for this lock will be able to continue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The lock initialized with <ref refid="_eagle_synchronizer_8c_1a98913d5b1b10058b0e839dabdbcaed12" kindref="member">EagleSynchronizer_CreateLock()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_eagle_synchronizer_8h_1a0f54c3edc40e4477acd9f503e51bf299" kindref="member">EagleSynchronizer_Lock()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleSynchronizer.c" line="17" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EagleSynchronizer.c" bodystart="16" bodyend="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_synchronizer_8h" kindref="compound">EagleSynchronizer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_memory_8h" kindref="compound">EagleMemory.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="_eagle_synchronizer_8h_1a98913d5b1b10058b0e839dabdbcaed12" refkind="member"><highlight class="normal"><ref refid="struct_eagle_lock" kindref="compound" tooltip="A lock is used to synchronize code blocks between threads.">EagleLock</ref>*<sp/><ref refid="_eagle_synchronizer_8c_1a98913d5b1b10058b0e839dabdbcaed12" kindref="member" tooltip="Create a new EagleLock.">EagleSynchronizer_CreateLock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_eagle_lock" kindref="compound" tooltip="A lock is used to synchronize code blocks between threads.">EagleLock</ref><sp/>*lock<sp/>=<sp/>(<ref refid="struct_eagle_lock" kindref="compound" tooltip="A lock is used to synchronize code blocks between threads.">EagleLock</ref>*)<sp/><ref refid="_eagle_memory_8c_1a21ad14d6772cd800661d5f2a29d18d2b" kindref="member" tooltip="Allocate a single block of memory.">EagleMemory_Allocate</ref>(</highlight><highlight class="stringliteral">&quot;EagleSynchronizer_CreateLock.1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_eagle_lock" kindref="compound" tooltip="A lock is used to synchronize code blocks between threads.">EagleLock</ref>));</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>lock)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_init(&amp;lock-&gt;<ref refid="struct_eagle_lock_1a4acff8232e4aec9cd5c6dc200ac55ef3" kindref="member" tooltip="Internal mutex that holds the lock.">mutex</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lock;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="_eagle_synchronizer_8h_1a6a41ea4ba599f003f8671993660464d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_synchronizer_8c_1a6a41ea4ba599f003f8671993660464d6" kindref="member" tooltip="Unlock an EagleLock.">EagleSynchronizer_Unlock</ref>(<ref refid="struct_eagle_lock" kindref="compound" tooltip="A lock is used to synchronize code blocks between threads.">EagleLock</ref><sp/>*lock)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;lock-&gt;<ref refid="struct_eagle_lock_1a4acff8232e4aec9cd5c6dc200ac55ef3" kindref="member" tooltip="Internal mutex that holds the lock.">mutex</ref>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EagleSynchronizer.c"/>
  </compounddef>
</doxygen>
