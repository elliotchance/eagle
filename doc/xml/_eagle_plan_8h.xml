<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_eagle_plan_8h" kind="file">
    <compoundname>EaglePlan.h</compoundname>
    <includes local="no">mach/mach_time.h</includes>
    <includes refid="_eagle_page_operations_8h" local="yes">EaglePageOperations.h</includes>
    <includes refid="_eagle_plan_operation_8h" local="yes">EaglePlanOperation.h</includes>
    <includes refid="_eagle_plan_buffer_provider_8h" local="yes">EaglePlanBufferProvider.h</includes>
    <includes refid="_eagle_plan_error_8h" local="yes">EaglePlanError.h</includes>
    <includes refid="_eagle_8h" local="yes">Eagle.h</includes>
    <includes refid="_eagle_data_type_8h" local="yes">EagleDataType.h</includes>
    <includes refid="_eagle_linked_list_8h" local="yes">EagleLinkedList.h</includes>
    <includedby refid="_eagle_plan_8c" local="yes">eagle/eagle/EaglePlan.c</includedby>
    <includedby refid="_eagle_plan_job_8h" local="yes">eagle/eagle/EaglePlanJob.h</includedby>
    <includedby refid="_eagle_db_console_8c" local="yes">eagle/eagledb/EagleDbConsole.c</includedby>
    <includedby refid="_eagle_db_instance_8h" local="yes">eagle/eagledb/EagleDbInstance.h</includedby>
    <includedby refid="_eagle_db_sql_expression_8h" local="yes">eagle/eagledb/EagleDbSqlExpression.h</includedby>
    <incdepgraph>
      <node id="1280">
        <label>EagleDbSqlExpressionType.h</label>
        <link refid="_eagle_db_sql_expression_type_8h"/>
      </node>
      <node id="1274">
        <label>EagleLinkedList.h</label>
        <link refid="_eagle_linked_list_8h"/>
        <childnode refid="1272" relation="include">
        </childnode>
        <childnode refid="1266" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1275" relation="include">
        </childnode>
      </node>
      <node id="1277">
        <label>EaglePlanOperation.h</label>
        <link refid="_eagle_plan_operation_8h"/>
        <childnode refid="1264" relation="include">
        </childnode>
        <childnode refid="1270" relation="include">
        </childnode>
        <childnode refid="1266" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1278" relation="include">
        </childnode>
      </node>
      <node id="1264">
        <label>EaglePageOperations.h</label>
        <link refid="_eagle_page_operations_8h"/>
        <childnode refid="1265" relation="include">
        </childnode>
        <childnode refid="1270" relation="include">
        </childnode>
      </node>
      <node id="1263">
        <label>mach/mach_time.h</label>
      </node>
      <node id="1281">
        <label>EagleDbSqlValueType.h</label>
        <link refid="_eagle_db_sql_value_type_8h"/>
      </node>
      <node id="1272">
        <label>EagleSynchronizer.h</label>
        <link refid="_eagle_synchronizer_8h"/>
        <childnode refid="1263" relation="include">
        </childnode>
        <childnode refid="1273" relation="include">
        </childnode>
        <childnode refid="1266" relation="include">
        </childnode>
      </node>
      <node id="1271">
        <label>pthread.h</label>
      </node>
      <node id="1276">
        <label>EaglePageProviderType.h</label>
        <link refid="_eagle_page_provider_type_8h"/>
      </node>
      <node id="1267">
        <label>EagleData.h</label>
        <link refid="_eagle_data_8h"/>
        <childnode refid="1268" relation="include">
        </childnode>
      </node>
      <node id="1282">
        <label>EaglePlanBufferProvider.h</label>
        <link refid="_eagle_plan_buffer_provider_8h"/>
        <childnode refid="1270" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1278" relation="include">
        </childnode>
      </node>
      <node id="1268">
        <label>EagleDataType.h</label>
        <link refid="_eagle_data_type_8h"/>
      </node>
      <node id="1266">
        <label>EagleBoolean.h</label>
        <link refid="_eagle_boolean_8h"/>
      </node>
      <node id="1269">
        <label>Eagle.h</label>
        <link refid="_eagle_8h"/>
      </node>
      <node id="1279">
        <label>EagleDbSqlExpressionHeader.h</label>
        <link refid="_eagle_db_sql_expression_header_8h"/>
        <childnode refid="1280" relation="include">
        </childnode>
      </node>
      <node id="1283">
        <label>EaglePlanError.h</label>
        <link refid="_eagle_plan_error_8h"/>
      </node>
      <node id="1265">
        <label>EaglePage.h</label>
        <link refid="_eagle_page_8h"/>
        <childnode refid="1266" relation="include">
        </childnode>
        <childnode refid="1267" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1268" relation="include">
        </childnode>
      </node>
      <node id="1278">
        <label>EagleDbSqlValue.h</label>
        <link refid="_eagle_db_sql_value_8h"/>
        <childnode refid="1279" relation="include">
        </childnode>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1268" relation="include">
        </childnode>
        <childnode refid="1266" relation="include">
        </childnode>
      </node>
      <node id="1262">
        <label>eagle/eagle/EaglePlan.h</label>
        <link refid="EaglePlan.h"/>
        <childnode refid="1263" relation="include">
        </childnode>
        <childnode refid="1264" relation="include">
        </childnode>
        <childnode refid="1277" relation="include">
        </childnode>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1283" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1268" relation="include">
        </childnode>
        <childnode refid="1274" relation="include">
        </childnode>
      </node>
      <node id="1270">
        <label>EaglePageProvider.h</label>
        <link refid="_eagle_page_provider_8h"/>
        <childnode refid="1271" relation="include">
        </childnode>
        <childnode refid="1265" relation="include">
        </childnode>
        <childnode refid="1272" relation="include">
        </childnode>
        <childnode refid="1266" relation="include">
        </childnode>
        <childnode refid="1274" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1268" relation="include">
        </childnode>
        <childnode refid="1276" relation="include">
        </childnode>
      </node>
      <node id="1273">
        <label>EagleLock.h</label>
        <link refid="_eagle_lock_8h"/>
        <childnode refid="1271" relation="include">
        </childnode>
        <childnode refid="1269" relation="include">
        </childnode>
      </node>
      <node id="1275">
        <label>EagleLinkedListItem.h</label>
        <link refid="_eagle_linked_list_item_8h"/>
        <childnode refid="1269" relation="include">
        </childnode>
        <childnode refid="1266" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1308">
        <label>eagle/eagledb/EagleDbSqlExpression.c</label>
        <link refid="_eagle_db_sql_expression_8c"/>
        <childnode refid="1308" relation="include">
        </childnode>
      </node>
      <node id="1304">
        <label>eagle/eagledb/EagleDbSqlExpression.h</label>
        <link refid="_eagle_db_sql_expression_8h"/>
        <childnode refid="1305" relation="include">
        </childnode>
        <childnode refid="1306" relation="include">
        </childnode>
        <childnode refid="1307" relation="include">
        </childnode>
        <childnode refid="1309" relation="include">
        </childnode>
        <childnode refid="1310" relation="include">
        </childnode>
        <childnode refid="1308" relation="include">
        </childnode>
        <childnode refid="1311" relation="include">
        </childnode>
        <childnode refid="1313" relation="include">
        </childnode>
        <childnode refid="1314" relation="include">
        </childnode>
      </node>
      <node id="1289">
        <label>eagle/eagle/EagleWorker.c</label>
        <link refid="_eagle_worker_8c"/>
      </node>
      <node id="1292">
        <label>eagle/eagle/EagleWorker.h</label>
        <link refid="_eagle_worker_8h"/>
        <childnode refid="1293" relation="include">
        </childnode>
        <childnode refid="1294" relation="include">
        </childnode>
        <childnode refid="1295" relation="include">
        </childnode>
        <childnode refid="1296" relation="include">
        </childnode>
        <childnode refid="1289" relation="include">
        </childnode>
        <childnode refid="1297" relation="include">
        </childnode>
      </node>
      <node id="1315">
        <label>eagle/eagledb/EagleDbSqlUnaryExpression.c</label>
        <link refid="_eagle_db_sql_unary_expression_8c"/>
      </node>
      <node id="1314">
        <label>eagle/eagledb/EagleDbSqlUnaryExpression.h</label>
        <link refid="_eagle_db_sql_unary_expression_8h"/>
        <childnode refid="1315" relation="include">
        </childnode>
      </node>
      <node id="1303">
        <label>eagle/eagledb/EagleDbSqlSelect.c</label>
        <link refid="_eagle_db_sql_select_8c"/>
      </node>
      <node id="1313">
        <label>eagle/eagledb/EagleDbSqlSelect.h</label>
        <link refid="_eagle_db_sql_select_8h"/>
        <childnode refid="1290" relation="include">
        </childnode>
        <childnode refid="1300" relation="include">
        </childnode>
        <childnode refid="1308" relation="include">
        </childnode>
        <childnode refid="1303" relation="include">
        </childnode>
      </node>
      <node id="1306">
        <label>eagle/eagledb/EagleDbSqlBinaryExpression.c</label>
        <link refid="_eagle_db_sql_binary_expression_8c"/>
        <childnode refid="1306" relation="include">
        </childnode>
      </node>
      <node id="1307">
        <label>eagle/eagledb/EagleDbSqlBinaryExpression.h</label>
        <link refid="_eagle_db_sql_binary_expression_8h"/>
        <childnode refid="1308" relation="include">
        </childnode>
      </node>
      <node id="1294">
        <label>eagle/eagle/EagleLogger.c</label>
        <link refid="_eagle_logger_8c"/>
      </node>
      <node id="1287">
        <label>eagle/eagle/EagleInstance.c</label>
        <link refid="_eagle_instance_8c"/>
        <childnode refid="1287" relation="include">
        </childnode>
      </node>
      <node id="1288">
        <label>eagle/eagle/EagleInstance.h</label>
        <link refid="_eagle_instance_8h"/>
        <childnode refid="1289" relation="include">
        </childnode>
        <childnode refid="1290" relation="include">
        </childnode>
      </node>
      <node id="1309">
        <label>eagle/eagledb/EagleDbSqlCastExpression.c</label>
        <link refid="_eagle_db_sql_cast_expression_8c"/>
        <childnode refid="1309" relation="include">
        </childnode>
      </node>
      <node id="1310">
        <label>eagle/eagledb/EagleDbSqlCastExpression.h</label>
        <link refid="_eagle_db_sql_cast_expression_8h"/>
        <childnode refid="1308" relation="include">
        </childnode>
      </node>
      <node id="1305">
        <label>eagle/eagledb/EagleDbParser.c</label>
        <link refid="_eagle_db_parser_8c"/>
      </node>
      <node id="1290">
        <label>eagle/eagledb/EagleDbInstance.c</label>
        <link refid="_eagle_db_instance_8c"/>
        <childnode refid="1290" relation="include">
        </childnode>
      </node>
      <node id="1300">
        <label>eagle/eagledb/EagleDbInstance.h</label>
        <link refid="_eagle_db_instance_8h"/>
        <childnode refid="1301" relation="include">
        </childnode>
        <childnode refid="1302" relation="include">
        </childnode>
        <childnode refid="1290" relation="include">
        </childnode>
        <childnode refid="1303" relation="include">
        </childnode>
      </node>
      <node id="1301">
        <label>eagle/eagledb/EagleDbInformationSchema.c</label>
        <link refid="_eagle_db_information_schema_8c"/>
        <childnode refid="1301" relation="include">
        </childnode>
      </node>
      <node id="1302">
        <label>eagle/eagledb/EagleDbInformationSchema.h</label>
        <link refid="_eagle_db_information_schema_8h"/>
        <childnode refid="1290" relation="include">
        </childnode>
      </node>
      <node id="1293">
        <label>eagle/eagle/EagleLinkedList.c</label>
        <link refid="_eagle_linked_list_8c"/>
      </node>
      <node id="1299">
        <label>eagle/eagledb/EagleDbConsole.c</label>
        <link refid="_eagle_db_console_8c"/>
        <childnode refid="1299" relation="include">
        </childnode>
      </node>
      <node id="1312">
        <label>eagle/eagledb/EagleDbSqlFunctionExpression.c</label>
        <link refid="_eagle_db_sql_function_expression_8c"/>
      </node>
      <node id="1296">
        <label>eagle/eagle/EaglePageProviderStream.c</label>
        <link refid="_eagle_page_provider_stream_8c"/>
      </node>
      <node id="1311">
        <label>eagle/eagledb/EagleDbSqlFunctionExpression.h</label>
        <link refid="_eagle_db_sql_function_expression_8h"/>
        <childnode refid="1312" relation="include">
        </childnode>
      </node>
      <node id="1298">
        <label>eagle/eagle/EagleWorkers.c</label>
        <link refid="_eagle_workers_8c"/>
      </node>
      <node id="1297">
        <label>eagle/eagle/EagleWorkers.h</label>
        <link refid="_eagle_workers_8h"/>
        <childnode refid="1288" relation="include">
        </childnode>
        <childnode refid="1298" relation="include">
        </childnode>
      </node>
      <node id="1285">
        <label>eagle/eagle/EaglePlan.c</label>
        <link refid="_eagle_plan_8c"/>
      </node>
      <node id="1284">
        <label>eagle/eagle/EaglePlan.h</label>
        <link refid="EaglePlan.h"/>
        <childnode refid="1285" relation="include">
        </childnode>
        <childnode refid="1286" relation="include">
        </childnode>
        <childnode refid="1299" relation="include">
        </childnode>
        <childnode refid="1300" relation="include">
        </childnode>
        <childnode refid="1304" relation="include">
        </childnode>
      </node>
      <node id="1291">
        <label>eagle/eagle/EaglePlanJob.c</label>
        <link refid="_eagle_plan_job_8c"/>
      </node>
      <node id="1286">
        <label>eagle/eagle/EaglePlanJob.h</label>
        <link refid="_eagle_plan_job_8h"/>
        <childnode refid="1287" relation="include">
        </childnode>
        <childnode refid="1288" relation="include">
        </childnode>
        <childnode refid="1291" relation="include">
        </childnode>
        <childnode refid="1289" relation="include">
        </childnode>
        <childnode refid="1292" relation="include">
        </childnode>
      </node>
      <node id="1295">
        <label>eagle/eagle/EaglePageProviderArray.c</label>
        <link refid="_eagle_page_provider_array_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_eagle_plan" prot="public">EaglePlan</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_eagle_plan_8h_1ad64ff9ab393377405e4a30043aad16d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EaglePlan_addBufferProvider</definition>
        <argsstring>(EaglePlan *plan, EaglePlanBufferProvider *bp, EagleBoolean free)</argsstring>
        <name>EaglePlan_addBufferProvider</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <param>
          <type><ref refid="struct_eagle_plan_buffer_provider" kindref="compound">EaglePlanBufferProvider</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type><ref refid="_eagle_boolean_8h_1aa01305945a9ba427016fd971ed17ec7a" kindref="member">EagleBoolean</ref></type>
          <declname>free</declname>
        </param>
        <briefdescription>
<para>Add a buffer provider to a plan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bp</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer provider. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">free</parametername>
</parameternamelist>
<parameterdescription>
<para>Free the buffer provider with the plan? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="118" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a43e8e0664ebd4975bab46bc9e2b41c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EaglePlan_addFreeObject</definition>
        <argsstring>(EaglePlan *plan, void *obj, void(*free)(void *))</argsstring>
        <name>EaglePlan_addFreeObject</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free</declname>
        </param>
        <briefdescription>
<para>Extra objects to be freed when this plan instance is removed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The attached object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">free</parametername>
</parameternamelist>
<parameterdescription>
<para>The Delete function required to free it. You may use NULL for <ref refid="_eagle_memory_8c_1aaa3b2daf6c57f2aa57de0ade732caeb5" kindref="member">EagleMemory_Free()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="192" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1acfb1391874a38372097316906df0cca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EaglePlan_addOperation</definition>
        <argsstring>(EaglePlan *plan, EaglePlanOperation *epo)</argsstring>
        <name>EaglePlan_addOperation</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <param>
          <type><ref refid="struct_eagle_plan_operation" kindref="compound">EaglePlanOperation</ref> *</type>
          <declname>epo</declname>
        </param>
        <briefdescription>
<para>Add an operation to a plan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">epo</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="110" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a446330890465751822500e308aa306a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EaglePlan_Delete</definition>
        <argsstring>(EaglePlan *plan)</argsstring>
        <name>EaglePlan_Delete</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>Delete a plan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="103" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="159" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1aac16fcb37593a9c39f546134df942d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_eagle_page" kindref="compound">EaglePage</ref> *</type>
        <definition>EaglePage* EaglePlan_getBuffer</definition>
        <argsstring>(EaglePlan *plan, int buffer)</argsstring>
        <name>EaglePlan_getBuffer</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Get a buffer by its index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer ID. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The eagle page for the buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="126"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1aa4a6c0ceb1db756a9dfc1b8f12c3278a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_eagle_plan_buffer_provider" kindref="compound">EaglePlanBufferProvider</ref> *</type>
        <definition>EaglePlanBufferProvider* EaglePlan_getBufferProviderByName</definition>
        <argsstring>(EaglePlan *plan, char *name)</argsstring>
        <name>EaglePlan_getBufferProviderByName</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a buffer provider by name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer provider. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if it cannot be found, otherwise the buffer provider will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="141" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="176" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a147dbc6cec2a888fab3cf9e10e486748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EaglePlan_getExecutionSeconds</definition>
        <argsstring>(EaglePlan *plan)</argsstring>
        <name>EaglePlan_getExecutionSeconds</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>Get the total execution time for all CPUs in seconds. </para>        </briefdescription>
        <detaileddescription>
<para>This does not include IO wait time, only CPU time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of CPU seconds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="163" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="227" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a68f4c896f89803b5a3bf902d236e7a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EaglePlan_getLockSeconds</definition>
        <argsstring>(EaglePlan *plan)</argsstring>
        <name>EaglePlan_getLockSeconds</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>Get the total wait time for all CPUs in seconds. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of CPU seconds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="170" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="215" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1ad5059e08a2228e954a346fb72494274b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EaglePlan_getRealExecutionSeconds</definition>
        <argsstring>(EaglePlan *plan)</argsstring>
        <name>EaglePlan_getRealExecutionSeconds</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>Get the real execution seconds. </para>        </briefdescription>
        <detaileddescription>
<para>This is the absolute time difference from when the plan begins executing until now. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of absolute execution seconds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="199" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="203" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a59af0aba773c38ce6eddd639b2049cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EaglePlan_getRealResultFields</definition>
        <argsstring>(EaglePlan *plan)</argsstring>
        <name>EaglePlan_getRealResultFields</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>The real result fields is the number of visible columns. </para>        </briefdescription>
        <detaileddescription>
<para>It does not included computer columns like the WHERE clause. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of visible result fields. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="184"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1acd76c6215c59c346a4d68bacbc552e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_eagle_boolean_8h_1aa01305945a9ba427016fd971ed17ec7a" kindref="member">EagleBoolean</ref></type>
        <definition>EagleBoolean EaglePlan_isError</definition>
        <argsstring>(EaglePlan *plan)</argsstring>
        <name>EaglePlan_isError</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>Check if the plan is currently in an error state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="156" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="195" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a5955ae857e0fbad9a3f6019551ce01d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
        <definition>EaglePlan* EaglePlan_New</definition>
        <argsstring>(int pageSize, int cores)</argsstring>
        <name>EaglePlan_New</name>
        <param>
          <type>int</type>
          <declname>pageSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cores</declname>
        </param>
        <briefdescription>
<para>Create a new plan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pageSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The default page size for the providers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cores</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of CPU cores. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new plan instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="97" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="9" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1abededd553c2315d431978a1602b2c918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EaglePlan_prepareBuffers</definition>
        <argsstring>(EaglePlan *plan, int buffers)</argsstring>
        <name>EaglePlan_prepareBuffers</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buffers</declname>
        </param>
        <briefdescription>
<para>Prepare the buffers before the expression can be compiled. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of buffers you will need to carry out all of the expressions. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="177" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="239" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a18f01f09903344bcf03c9c22fa73fffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EaglePlan_setError</definition>
        <argsstring>(EaglePlan *plan, EaglePlanError errorCode, char *errorMessage)</argsstring>
        <name>EaglePlan_setError</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <param>
          <type><ref refid="_eagle_plan_error_8h_1a0caae9eb4d0a119af359eada34628bef" kindref="member">EaglePlanError</ref></type>
          <declname>errorCode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Set the error for the plan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">errorCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">errorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>The message describing the error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="149" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="_eagle_plan_8h_1a2263dd1175ba338d02f5983d3d246c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* EaglePlan_toString</definition>
        <argsstring>(EaglePlan *plan)</argsstring>
        <name>EaglePlan_toString</name>
        <param>
          <type><ref refid="struct_eagle_plan" kindref="compound">EaglePlan</ref> *</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>Render the plan as a descriptive string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new string, you must free it when you are finished with it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h" line="133" bodyfile="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.c" bodystart="72" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>eagle_EaglePlan_h</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>eagle_EaglePlan_h</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mach/mach_time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_page_operations_8h" kindref="compound">EaglePageOperations.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_plan_operation_8h" kindref="compound">EaglePlanOperation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_plan_buffer_provider_8h" kindref="compound">EaglePlanBufferProvider.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_plan_error_8h" kindref="compound">EaglePlanError.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_8h" kindref="compound">Eagle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_data_type_8h" kindref="compound">EagleDataType.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eagle_linked_list_8h" kindref="compound">EagleLinkedList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="struct_eagle_plan" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22" refid="struct_eagle_plan_1a165d50b85dcb8a5e1f68878845eb2db0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1abbf13e8ccd8267eae6f8134bdedb96b7" kindref="member" tooltip="This struct instance variable may be freed internally or externally.">EAGLE_ATTR_SEMI_MANAGED</ref><sp/><ref refid="struct_eagle_linked_list" kindref="compound" tooltip="A linked list (FIFO).">EagleLinkedList</ref><sp/>*<ref refid="struct_eagle_plan_1a165d50b85dcb8a5e1f68878845eb2db0" kindref="member" tooltip="The operations.">operations</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27" refid="struct_eagle_plan_1a187318c3565430d91292e21174716f1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a36dbf56fa988abbaff74a82249eb6ea4" kindref="member" tooltip="This struct instance variable&amp;#39;s memory is fully managed internally.">EAGLE_ATTR_MANAGED</ref><sp/><ref refid="struct_eagle_linked_list" kindref="compound" tooltip="A linked list (FIFO).">EagleLinkedList</ref><sp/>*<ref refid="struct_eagle_plan_1a187318c3565430d91292e21174716f1f" kindref="member" tooltip="The page providers.">providers</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32" refid="struct_eagle_plan_1a0f8fcbb2d8136c7d33c2e72f3642d6f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a92e6a76bef8c68fa1b940a5c4520f262" kindref="member" tooltip="This struct instance variable is not dynamically allocated so it&amp;#39;s memory does...">EAGLE_ATTR_NA</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_eagle_plan_1a0f8fcbb2d8136c7d33c2e72f3642d6f2" kindref="member" tooltip="The amount of records to read per page.">pageSize</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37" refid="struct_eagle_plan_1a76d494f6fca60a76a9ecb32309bf8e80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a92e6a76bef8c68fa1b940a5c4520f262" kindref="member" tooltip="This struct instance variable is not dynamically allocated so it&amp;#39;s memory does...">EAGLE_ATTR_NA</ref><sp/><ref refid="_eagle_plan_error_8h_1a0caae9eb4d0a119af359eada34628bef" kindref="member" tooltip="Represents the types of errors (or successes) that can occur inside a plan.">EaglePlanError</ref><sp/><ref refid="struct_eagle_plan_1a76d494f6fca60a76a9ecb32309bf8e80" kindref="member" tooltip="The error status.">errorCode</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="struct_eagle_plan_1a9957046d991c59851a5052435e95ce0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a36dbf56fa988abbaff74a82249eb6ea4" kindref="member" tooltip="This struct instance variable&amp;#39;s memory is fully managed internally.">EAGLE_ATTR_MANAGED</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_eagle_plan_1a9957046d991c59851a5052435e95ce0a" kindref="member" tooltip="Further details about the error, this may be NULL.">errorMessage</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47" refid="struct_eagle_plan_1a5d79e47d901db222a71b208b098c3d6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a36dbf56fa988abbaff74a82249eb6ea4" kindref="member" tooltip="This struct instance variable&amp;#39;s memory is fully managed internally.">EAGLE_ATTR_MANAGED</ref><sp/><ref refid="struct_eagle_page_provider" kindref="compound" tooltip="A page provider.">EaglePageProvider</ref><sp/>**<ref refid="struct_eagle_plan_1a5d79e47d901db222a71b208b098c3d6d" kindref="member" tooltip="Result set after execution.">result</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52" refid="struct_eagle_plan_1afed368b2757680c7fcd64d2ffc079c38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a92e6a76bef8c68fa1b940a5c4520f262" kindref="member" tooltip="This struct instance variable is not dynamically allocated so it&amp;#39;s memory does...">EAGLE_ATTR_NA</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_eagle_plan_1afed368b2757680c7fcd64d2ffc079c38" kindref="member" tooltip="The number of providers in result.">resultFields</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="struct_eagle_plan_1ac2a54e490b7f5500768c6bf11d2d57e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a36dbf56fa988abbaff74a82249eb6ea4" kindref="member" tooltip="This struct instance variable&amp;#39;s memory is fully managed internally.">EAGLE_ATTR_MANAGED</ref><sp/>uint64_t<sp/>*<ref refid="struct_eagle_plan_1ac2a54e490b7f5500768c6bf11d2d57e4" kindref="member" tooltip="The total time the query took to execute.">executionTime</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="struct_eagle_plan_1a2e37519c175daf57b714863ffb54d0df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a36dbf56fa988abbaff74a82249eb6ea4" kindref="member" tooltip="This struct instance variable&amp;#39;s memory is fully managed internally.">EAGLE_ATTR_MANAGED</ref><sp/>uint64_t<sp/>*<ref refid="struct_eagle_plan_1a2e37519c175daf57b714863ffb54d0df" kindref="member" tooltip="The total time the thread was left waiting for a mutex lock to be release.">lockTime</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67" refid="struct_eagle_plan_1ac10ecee7f82c1bbe01ce5a56ceaa55e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a92e6a76bef8c68fa1b940a5c4520f262" kindref="member" tooltip="This struct instance variable is not dynamically allocated so it&amp;#39;s memory does...">EAGLE_ATTR_NA</ref><sp/>uint64_t<sp/><ref refid="struct_eagle_plan_1ac10ecee7f82c1bbe01ce5a56ceaa55e8" kindref="member" tooltip="The absolute start time.">startTime</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="struct_eagle_plan_1a9021062c2280f08138aabe013bfa3746" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a92e6a76bef8c68fa1b940a5c4520f262" kindref="member" tooltip="This struct instance variable is not dynamically allocated so it&amp;#39;s memory does...">EAGLE_ATTR_NA</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_eagle_plan_1a9021062c2280f08138aabe013bfa3746" kindref="member" tooltip="The number of buffers needed for the execution.">buffersNeeded</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="struct_eagle_plan_1aded4db24d0e11cc63687efdda334e3ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a36dbf56fa988abbaff74a82249eb6ea4" kindref="member" tooltip="This struct instance variable&amp;#39;s memory is fully managed internally.">EAGLE_ATTR_MANAGED</ref><sp/><ref refid="_eagle_data_type_8h_1ac484ab15f125f81b0437f7aed65fbbb2" kindref="member" tooltip="Data types for pages.">EagleDataType</ref><sp/>*<ref refid="struct_eagle_plan_1aded4db24d0e11cc63687efdda334e3ac" kindref="member" tooltip="The types for each buffer.">bufferTypes</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="struct_eagle_plan_1a3269dca90a95e13999422383b0ed9278" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a36dbf56fa988abbaff74a82249eb6ea4" kindref="member" tooltip="This struct instance variable&amp;#39;s memory is fully managed internally.">EAGLE_ATTR_MANAGED</ref><sp/><ref refid="struct_eagle_linked_list" kindref="compound" tooltip="A linked list (FIFO).">EagleLinkedList</ref><sp/>*<ref refid="struct_eagle_plan_1a3269dca90a95e13999422383b0ed9278" kindref="member" tooltip="This is a stack of objects to be freed when this object is deleted.">freeObjects</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="struct_eagle_plan_1a02463760ed5bc5ebcc0101fa9489a622" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_eagle_8h_1a92e6a76bef8c68fa1b940a5c4520f262" kindref="member" tooltip="This struct instance variable is not dynamically allocated so it&amp;#39;s memory does...">EAGLE_ATTR_NA</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_eagle_plan_1a02463760ed5bc5ebcc0101fa9489a622" kindref="member" tooltip="The number of CPU cores.">cores</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/><ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref>*<sp/><ref refid="_eagle_plan_8c_1a5955ae857e0fbad9a3f6019551ce01d6" kindref="member" tooltip="Create a new plan.">EaglePlan_New</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cores);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1a446330890465751822500e308aa306a8" kindref="member" tooltip="Delete a plan.">EaglePlan_Delete</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1acfb1391874a38372097316906df0cca1" kindref="member" tooltip="Add an operation to a plan.">EaglePlan_addOperation</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan,<sp/><ref refid="struct_eagle_plan_operation" kindref="compound" tooltip="Represents a plan operation, or a single step in the executation of an expression...">EaglePlanOperation</ref><sp/>*epo);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1ad64ff9ab393377405e4a30043aad16d7" kindref="member" tooltip="Add a buffer provider to a plan.">EaglePlan_addBufferProvider</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan,<sp/><ref refid="struct_eagle_plan_buffer_provider" kindref="compound" tooltip="This structure acts as a link between a page providers data and the buffer for an...">EaglePlanBufferProvider</ref><sp/>*bp,<sp/><ref refid="_eagle_boolean_8h_1aa01305945a9ba427016fd971ed17ec7a" kindref="member" tooltip="Enum for representing boolean values.">EagleBoolean</ref><sp/>free);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="struct_eagle_page" kindref="compound" tooltip="Represents a single page of data.">EaglePage</ref>*<sp/><ref refid="_eagle_plan_8h_1aac16fcb37593a9c39f546134df942d22" kindref="member" tooltip="Get a buffer by its index.">EaglePlan_getBuffer</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="_eagle_plan_8c_1a2263dd1175ba338d02f5983d3d246c2c" kindref="member" tooltip="Render the plan as a descriptive string.">EaglePlan_toString</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="struct_eagle_plan_buffer_provider" kindref="compound" tooltip="This structure acts as a link between a page providers data and the buffer for an...">EaglePlanBufferProvider</ref>*<sp/><ref refid="_eagle_plan_8c_1aa4a6c0ceb1db756a9dfc1b8f12c3278a" kindref="member" tooltip="Get a buffer provider by name.">EaglePlan_getBufferProviderByName</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1a18f01f09903344bcf03c9c22fa73fffa" kindref="member" tooltip="Set the error for the plan.">EaglePlan_setError</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan,<sp/><ref refid="_eagle_plan_error_8h_1a0caae9eb4d0a119af359eada34628bef" kindref="member" tooltip="Represents the types of errors (or successes) that can occur inside a plan.">EaglePlanError</ref><sp/>errorCode,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errorMessage);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="_eagle_boolean_8h_1aa01305945a9ba427016fd971ed17ec7a" kindref="member" tooltip="Enum for representing boolean values.">EagleBoolean</ref><sp/><ref refid="_eagle_plan_8c_1acd76c6215c59c346a4d68bacbc552e3f" kindref="member" tooltip="Check if the plan is currently in an error state.">EaglePlan_isError</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1a147dbc6cec2a888fab3cf9e10e486748" kindref="member" tooltip="Get the total execution time for all CPUs in seconds.">EaglePlan_getExecutionSeconds</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1a68f4c896f89803b5a3bf902d236e7a94" kindref="member" tooltip="Get the total wait time for all CPUs in seconds.">EaglePlan_getLockSeconds</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1abededd553c2315d431978a1602b2c918" kindref="member" tooltip="Prepare the buffers before the expression can be compiled.">EaglePlan_prepareBuffers</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffers);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8h_1a59af0aba773c38ce6eddd639b2049cf5" kindref="member" tooltip="The real result fields is the number of visible columns.">EaglePlan_getRealResultFields</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1a43e8e0664ebd4975bab46bc9e2b41c48" kindref="member" tooltip="Extra objects to be freed when this plan instance is removed.">EaglePlan_addFreeObject</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_eagle_plan_8c_1ad5059e08a2228e954a346fb72494274b" kindref="member" tooltip="Get the real execution seconds.">EaglePlan_getRealExecutionSeconds</ref>(<ref refid="struct_eagle_plan" kindref="compound" tooltip="An execution plan.">EaglePlan</ref><sp/>*plan);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/elliot/Xcode/eagle/eagle/eagle/EaglePlan.h"/>
  </compounddef>
</doxygen>
